# Charger la base de données intégrée `WorldPhones`
data("WorldPhones")
# Description de la base de données
str(WorldPhones)  # Structure
summary(WorldPhones)  # Résumé statistique
dim(WorldPhones)  # Dimensions
head(WorldPhones)  # Aperçu des premières lignes
help("WorldPhones")
nbrTelAn <- rowSums(WorldPhones)
print(nbrTelAn)
nbrTelCont <- colSums(WorldPhones)
print(nbrTelCont)
# Continent avec le plus de numéros
continent_max <- names(nbrTelCont)[which.max(nbrTelCont)]
# Continent avec le moins de numéros
continent_min <- names(nbrTelCont)[which.min(nbrTelCont)]
cat("Continent avec le plus de numéros :", continent_max, "\n")
cat("Continent avec le moins de numéros :", continent_min, "\n")
# Nombre de continents avec plus de 20 000 numéros
continents_20k <- sum(nbrTelCont > 20000)
cat("Nombre de continents avec plus de 20 000 numéros :", continents_20k, "\n")
# 2)  Nombre de continents avec plus de 50 000 numéros
continents_50k <- sum(nbrTelCont > 50000)
cat("Nombre de continents avec plus de 50 000 numéros :", continents_50k, "\n")
# 3) Nombre de continents avec plus de 200 000 numéros
continents_200k <- sum(nbrTelCont > 200000)
cat("Nombre de continents avec plus de 200 000 numéros :", continents_200k, "\n")
nbrTelCont <- colSums(WorldPhones)
print(nbrTelCont)
# Continent avec le plus de numéros
continent_max <- names(nbrTelCont)[which.max(nbrTelCont)]
# Continent avec le moins de numéros
continent_min <- names(nbrTelCont)[which.min(nbrTelCont)]
cat("Continent avec le plus de numéros :", continent_max, "\n")
cat("Continent avec le moins de numéros :", continent_min, "\n")
continents_20k <- sum(nbrTelCont > 20000)
cat("Nombre de continents avec plus de 20 000 numéros :", continents_20k, "\n")
continents_50k <- sum(nbrTelCont > 50000)
cat("Nombre de continents avec plus de 50 000 numéros :", continents_50k, "\n")
continents_200k <- sum(nbrTelCont > 200000)
cat("Nombre de continents avec plus de 200 000 numéros :", continents_200k, "\n")
# Repertoire de travail
setwd("C:/Users/ANSD/Documents/ISSP/ProjetAthena_Groupe_X/ProjetAthena")
#  charger le package readxl (si nécessaire)
library(readxl)
library(dplyr)
# Crée un nouvel environnement
env_athena <- new.env()
# Spécifie le chemin du fichier Excel
chemin_fichier <- "projet_athena.xlsx"
# Liste toutes les feuilles du classeur
feuilles <- excel_sheets(chemin_fichier)
# Importer chaque feuille et créer une base avec son nom
for (nom_feuille in feuilles) {
assign(nom_feuille, read_excel(chemin_fichier, sheet = nom_feuille),envir = env_athena)
}
# Vérification : afficher les noms des bases créées
print(ls(env_athena))  # Liste des objets dans l'environnement actuel
View(env_athena)
diplome
---
title: "Projet_Athena"
# Spécifie le chemin du fichier Excel
chemin_fichier <- "projet_athena.xlsx"
# Liste toutes les feuilles du classeur
feuilles <- excel_sheets(chemin_fichier)
# Importer chaque feuille et créer une base avec son nom
for (nom_feuille in feuilles) {
assign(nom_feuille, read_excel(chemin_fichier, sheet = nom_feuille))
}
# Vérification : afficher les noms des bases créées
print(ls())  # Liste des objets dans l'environnement actuel
diplome
condition_admission
# Filtrer les diplômes ayant uniquement la modalité 1
diplome_uniquement_bac <- condition_admission %>%
group_by(diplome) %>%
filter(all(niveau_admission == 1)) %>%
distinct(diplome)
# Afficher le résultat
print(diplome_uniquement_bac)
# Filtrer le data frame pour retrouver les noms des diplômes pour les numéros spécifiés
diplomes_uniquement_bac <- diplome %>%
filter(numero %in% diplome_uniquement_bac$diplome)
diplomes_uniquement_bac <- diplomes_uniquement_bac$diplome
print(diplomes_uniquement_bac)
# Filtrer les diplômes avec au moins 3 modalités différentes de niveau_admission
df_filtré <- condition_admission %>%
group_by(diplome) %>%
filter(n_distinct(niveau_admission) >= 3) %>%
ungroup()
# Afficher les résultats
print(df_filtré)
# Filtrer les diplômes avec au moins 3 modalités différentes de niveau_admission
diplome_au_moins_3niveau <- condition_admission %>%
group_by(diplome) %>%
filter(n_distinct(niveau_admission) >= 3) %>%
ungroup()
# Afficher les résultats
print(diplome_au_moins_3niveau)
# Définir la fonction
filtrer_noms <- function(base, numeros, colonne_numero) {
# Filtrer le dataframe pour retrouver les noms correspondant aux numéros spécifiés
noms_filtrés <- base %>%
filter(get(colonne_numero) %in% numeros)
# Extraire la colonne des noms
noms_filtrés <- diplomes_filtrés[[colonne_numero]]
# Retourner les noms filtrés
return(noms_filtrés)
}
diplomes_uniquement_bac = filtrer_noms(diplome,diplome_uniquement_bac$diplome,numero)
diplomes_uniquement_bac = filtrer_noms(diplome,diplome_uniquement_bac$diplome,diplome$numero)
# Filtrer le data frame pour retrouver les noms des diplômes pour les numéros spécifiés
diplomes_uniquement_bac <- diplome %>%
filter(numero %in% diplome_uniquement_bac$diplome)
diplomes_uniquement_bac <- diplomes_uniquement_bac$diplome
print(diplomes_uniquement_bac)
numeros = distinct(diplome_au_moins_3niveau$diplome)
# Afficher les résultats
print(distinct(diplome_au_moins_3niveau))
# Afficher les résultats
print(distinct(diplome_au_moins_3niveau$diplome))
numeros = diplome_au_moins_3niveau$diplome
numeros
distinct(numeros)
unique(numeros)
# Filtrer les diplômes avec au moins 3 modalités différentes de niveau_admission
diplome_au_moins_3niveau <- condition_admission %>%
group_by(diplome) %>%
filter(n_distinct(niveau_admission) >= 3) %>%
ungroup()
# Afficher les résultats
print(diplome_au_moins_3niveau)
numeros = unique(diplome_au_moins_3niveau$diplome)
# Filtrer le data frame pour retrouver les noms des diplômes pour les numéros spécifiés
diplomes_au_moins_3niveau <- diplome %>%
filter(numero %in% numeros)
diplomes_au_moins_3niveau <- diplomes_au_moins_3niveau$diplome
print(diplomes_au_moins_3niveau)
diplome
install.packages("foreign")
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("LALLOGO")
install.packages("labelmachine")
install.packages("qeML")
install.packages("Reticulate")
install.packages("reticulate")
install.packages("EnhancedVolcano ")
install.packages("nlcv")
install.packages("opencv")
install.packages("openai")
install.packages("openair")
install.packages("SQL")
install.packages("sqlparseR")
install.packages("sqlcaser")
install.packages("SQI")
install.packages("NO.PING.PONG")
install.packages("redatam")
install.packages("duckdb")
install.packages("duckplyr")
install.packages("NLP")
install.packages("PytrendsLongitudinalR")
install.packages("openxlsx")
install.packages("XLS")
install.packages("numbers")
install.packages("OECD")
install.packages(c("ape", "BH", "emmeans", "openssl", "parallelly", "pillar"))
install.packages("rsdmx")
rm(list=ls())
library(sf)
library(dplyr)
library(readxl)
library(ggplot2)
library(RColorBrewer)
communes_dakar <- read_sf("C:/Users/ANSD/Documents/ENSAE-ISE/BSA/Recensement Ensae 2024/Syntaxe traitement/Quartier_Firhoun/communesDakar/communesDakar.shp")
#Répartition par département
data_dep <- read_excel('C:/Users/ANSD/Documents/ENSAE-ISE/BSA/Recensement Ensae 2024/Syntaxe traitement/Quartier_Firhoun/Adresse.xlsx')
tableau_dep <- data_dep %>%
group_by(Departements) %>%
summarise(effectif=n()) %>%
mutate(frequence=100*effectif/sum(effectif))
#Répartition par commune
communes_habitees <- communes_dakar %>%
filter(effectif_c!=0)
ggplot(communes_habitees, aes(x = NAME_4, y = effectif_c)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Effectifs par commune", x = "Commune", y = "Effectif")
ggplot(communes_habitees, aes(group_hdi, share, fill = group_hdi)) +
geom_col() +
geom_hline(yintercept = 0) +
geom_text(
aes(y = y_text, label = label, color = group_hdi),
size = 4
)
# Carte
ggplot(communes_dakar) +
geom_sf(aes(fill = effectif_c), linewidth = 0, alpha = 0.9) +
theme_void() +
scale_fill_viridis_c(
trans = "log", breaks = c(1, 5, 10, 15, 20, 25, 30, 50),
name = "Nombre d'étudiants",
guide = guide_legend(
keyheight = unit(3, units = "mm"),
keywidth = unit(12, units = "mm"),
label.position = "bottom",
title.position = "top",
nrow = 1
)
) +
theme(
text = element_text(color = "#22211d"),
plot.background = element_rect(fill = "#f5f5f2", color = NA),
panel.background = element_rect(fill = "#f5f5f2", color = NA),
legend.background = element_rect(fill = "#f5f5f2", color = NA),
plot.title = element_text(
size = 20, hjust = 0.01, color = "#4e4d47",
margin = margin(
b = -0.1, t = 0.4, l = 2,
unit = "cm"
)
),
plot.subtitle = element_text(
size = 15, hjust = 0.01,
color = "#4e4d47",
margin = margin(
b = -0.1, t = 0.43, l = 2,
unit = "cm"
)
),
plot.caption = element_text(
size = 10,
color = "#4e4d47",
margin = margin(
b = 0.3, r = -99, t = 0.3,
unit = "cm"
)
),
legend.position = c(0.7, 0.09)
)
#Répartition par commune
communes_habitees <- communes_dakar %>%
filter(effectif_c!=0)
ggplot(communes_habitees, aes(x = NAME_4, y = effectif_c)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Effectifs par commune", x = "Commune", y = "Effectif")
ggplot(communes_habitees, aes(group_hdi, share, fill = group_hdi)) +
geom_col() +
geom_hline(yintercept = 0) +
geom_text(
aes(y = y_text, label = label, color = group_hdi),
size = 4
)
View(communes_dakar)
View(communes_habitees)
View(data_dep)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
# Importation de la base de données
data <- read_excel("A_B.xlsx")
# Importation de la base de données
data <- read_excel("C:/Users/ANSD/Documents/ENSAE-ISE/BSA/Recensement Ensae 2024/Base recensement/Total/Section_A_B_traitee.xlsx")
# Selectionner les variables cibles
niv_vie <- data$B_1_7_
mod_vie <- data$B_2_1_
## Regrouper en groupe
data <- data %>%
mutate(
cat_niveau_vie = case_when(
data$B_1_7_ < 3 ~ "Bas",
data$B_1_7_ == 3 ~ "Moyen",
data$B_1_7_ > 3 ~ "Élevé",
TRUE ~ NA_character_  # Valeur manquante si aucune condition n'est satisfaite
)
)
# Selectionner les variables cibles
niv_vie <- cat_niveau_vi
mod_vie <- data$B_2_1_
# Selectionner les variables cibles
niv_vie <- data$cat_niveau_vie
mod_vie <- data$B_2_1_
# Créer un data frame pour la visualisation
visual_data <- data.frame(niv_vie, mod_vie)
print(visual_data)
# Diagramme en barres pour le niveau de vie
ggplot(visual_data, aes(x = factor(niv_vie))) +
geom_bar() +
xlab("Valeur de niv_vie") +
ylab("Fréquence") +
ggtitle("Diagramme en barres pour niv_vie")
# Diagramme en barres pour le mode de vie
ggplot(visual_data, aes(x = mod_vie)) +
geom_bar() +
xlab("Valeur de mod_vie") +
ylab("Fréquence") +
ggtitle("Diagramme en barres pour mod_vie")
# Diagramme en barres pour le niveau de vie
ggplot(visual_data, aes(x = factor(niv_vie))) +
geom_bar() +
xlab("Valeur de niv_vie") +
ylab("Fréquence") +
ggtitle("Diagramme en barres pour niv_vie")
# Diagramme en barres pour le mode de vie
ggplot(visual_data, aes(x = mod_vie)) +
geom_bar() +
xlab("Valeur de mod_vie") +
ylab("Fréquence") +
ggtitle("Diagramme en barres pour mod_vie")
ggplot(visual_data, aes(x = mod_vie, fill = as.factor(niv_vie))) +
geom_bar(position = "dodge") +
labs(
title = "Diagramme en barres côte à côte : Mode de logement par niveau de vie",
x = "Mode de logement",
y = "Effectif",
fill = "Niveau de vie"
) +
theme_minimal()
ggplot(visual_data, aes(x = mniv_vie, fill = as.factor(mod_vie))) +
geom_bar(position = "dodge") +
labs(
title = "Diagramme en barres côte à côte : Mode de logement par niveau de vie",
x = "Mode de logement",
y = "Effectif",
fill = "Niveau de vie"
) +
theme_minimal()
ggplot(visual_data, aes(x = niv_vie, fill = as.factor(mod_vie))) +
geom_bar(position = "dodge") +
labs(
title = "Diagramme en barres côte à côte : Mode de logement par niveau de vie",
x = "Mode de logement",
y = "Effectif",
fill = "Niveau de vie"
) +
theme_minimal()
ggplot(visual_data, aes(x = niv_vie, fill = as.factor(mod_vie))) +
geom_bar(position = "stack") +
labs(
title = "Diagramme en barres côte à côte : Mode de logement par niveau de vie",
x = "Mode de logement",
y = "Effectif",
fill = "Niveau de vie"
) +
theme_minimal()
ggplot(visual_data, aes(x = mod_vie, fill = as.factor(niv_vie))) +
geom_bar(position = "stack") +
labs(
title = "Diagramme en barres côte à côte : Mode de logement par niveau de vie",
x = "Mode de logement",
y = "Effectif",
fill = "Niveau de vie"
) +
theme_minimal()
# Calcul des pourcentages
library(dplyr)
visual_data <- visual_data %>%
group_by(mod_vie, niv_vie) %>%
summarise(effectif = n()) %>%
mutate(pourcentage = effectif / sum(effectif) * 100)
# Création du graphique avec pourcentages
library(ggplot2)
ggplot(visual_data, aes(x = mod_vie, y = effectif, fill = as.factor(niv_vie))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(pourcentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +
labs(
title = "Diagramme en barres empilées : Mode de logement par niveau de vie",
x = "Mode de logement",
y = "Effectif",
fill = "Niveau de vie"
) +
theme_minimal()
ggplot(visual_data, aes(x = mod_vie, y = effectif, fill = as.factor(niv_vie))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(pourcentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +
labs(
title = "Diagramme en barres empilées : Mode de logement par niveau de vie",
x = "Mode de logement",
y = "Effectif",
fill = "Niveau de vie"
) +
theme_minimal()
theme(
axis.text.x = element_text(angle = 45, hjust = 1) # Angle oblique
)
ggplot(visual_data, aes(x = mod_vie, y = effectif, fill = as.factor(niv_vie))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(pourcentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +
labs(
title = "Diagramme en barres empilées : Mode de logement par niveau de vie",
x = "Mode de logement",
y = "Effectif",
fill = "Niveau de vie"
) +
theme_minimal()+
theme(
axis.text.x = element_text(angle = 45, hjust = 1) # Angle oblique
)
ggplot(visual_data, aes(x = mod_vie, y = effectif, fill = as.factor(niv_vie))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(pourcentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +
labs(
title = "Diagramme en barres empilées : Mode de logement par niveau de vie",
x = "Mode de logement",
y = "Effectif",
fill = "Niveau de vie"
) +
theme_minimal()+
theme(
axis.text.x = element_text(angle = 45, hjust = 1) # Angle oblique
)
setwd("C:\Users\ANSD\Documents\ENSAE-ISE\SEMESTRE 2\R\Projet-statistique-sous-R\TP 1\KAFANDO")
## Importation des bases
base_me =  read.csv("ehcvm_menage_bfa2021.csv")
setwd("C:/Users/ANSD/Documents/ENSAE-ISE/SEMESTRE 2/R/Projet-statistique-sous-R/TP 1/KAFANDO")
## Importation des bases
base_me =  read.csv("ehcvm_menage_bfa2021.csv")
base_co = read.csv("s00_co_bfa2021.csv")
View(base_co)
View(base_me)
str(base_me)
str(base_co)
